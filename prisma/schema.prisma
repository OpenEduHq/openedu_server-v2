// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  email           String  @unique
  userName        String  @unique
  name            String
  isVerified      Boolean @default(false)
  password        String
  bio             String?
  image           String?
  githubId        String?
  linkdinId       String?
  portfolio       String?
  portfolioSiteId String?

  token    String @default(cuid())
  tokenCli String @default(cuid())
  role     Roles

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  courses        UserCourse[]
  projects       UserProject[]
  quizzes        UserQuiz[]
  settings       UserSettings  @relation(fields: [userSettingsId], references: [id])
  userSettingsId String
}

enum Roles {
  USER
  ADMIN
}

model UserSettings {
  id                String             @id @default(uuid())
  emailSubscription EmailsSubscription @relation(fields: [emailsSubscriptionId], references: [id])
  publicProfile     Boolean            @default(true)
  publicPortfolio   Boolean            @default(true)
  publicBio         Boolean            @default(true)
  publicEmail       Boolean            @default(true)
  publicGithub      Boolean            @default(true)
  publicLinkdin     Boolean            @default(true)
  publicProjects    Boolean            @default(true)
  publicCourses     Boolean            @default(true)

  emailsSubscriptionId String

  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailsSubscription {
  id               String  @id @default(uuid())
  courseUpdates    Boolean @default(true)
  quizUpdates      Boolean @default(true)
  announcements    Boolean @default(true)
  SecurityFeatures Boolean @default(true)
  ProductUpgrades  Boolean @default(true)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserSettings UserSettings[]
}

model UserCourse {
  id       String @id @default(uuid())
  userId   String
  courseId String
  progress Int    @default(0)
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model UserProject {
  id        String  @id @default(uuid())
  userId    String
  projectId String
  progress  Int     @default(0)
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model UserQuiz {
  id       String @id @default(uuid())
  userId   String
  quizId   String
  progress Int    @default(0)
  user     User   @relation(fields: [userId], references: [id])
  quiz     Quiz   @relation(fields: [quizId], references: [id])

  @@unique([userId, quizId])
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String
  users       UserCourse[]
}

model Project {
  id          String        @id @default(uuid())
  title       String
  description String
  users       UserProject[]
}

model Quiz {
  id        String     @id @default(cuid())
  title     String
  questions Question[]
  users     UserQuiz[]
}

model Question {
  id          String  @id @default(cuid())
  question    String
  answers     String
  distractor1 String
  distractor2 String
  distractor3 String
  explanation String
  link        String
  quiz        Quiz?   @relation(fields: [quizId], references: [id])
  quizId      String?
}

model PortfolioSiteIds {
  id          String @id @default(uuid())
  title       String
  description String
  siteSubUrl  String
}
